/* eslint-disable */

const CACHE_NAME = 'financial-compass-v2.0';
const STATIC_CACHE = 'static-v2.0';
const DYNAMIC_CACHE = 'dynamic-v2.0';
const API_CACHE = 'api-v2.0';

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_ASSETS = [
  '/',
  '/static/css/main.css',
  '/static/js/main.js',
  '/manifest.json',
  '/favicon.ico',
  '/favicon.svg',
  '/apple-touch-icon.svg'
];

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const API_ENDPOINTS = [
  '/api/cbr/currencies',
  '/api/stocks/data',
  '/api/user/profile'
];

// –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_STRATEGIES = {
  // –ö—ç—à —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤)
  CACHE_FIRST: 'cache-first',
  // –°–µ—Ç—å —Å–Ω–∞—á–∞–ª–∞ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
  NETWORK_FIRST: 'network-first',
  // –¢–æ–ª—å–∫–æ –∫—ç—à (–¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü)
  CACHE_ONLY: 'cache-only',
  // –¢–æ–ª—å–∫–æ —Å–µ—Ç—å (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  NETWORK_ONLY: 'network-only'
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üíæ [SW] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker...');
  
  event.waitUntil(
    Promise.all([
      // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(STATIC_CACHE).then((cache) => {
        console.log('üì¶ [SW] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
        return cache.addAll(STATIC_ASSETS);
      }),
      
      // –°–æ–∑–¥–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
      caches.open(DYNAMIC_CACHE).then((cache) => {
        console.log('üåê [SW] –°–æ–∑–¥–∞–Ω–∏–µ offline –∫—ç—à–∞');
        return cache.put('/offline', new Response(`
          <!DOCTYPE html>
          <html lang="ru">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–º–ø–∞—Å - –û—Ñ—Ñ–ª–∞–π–Ω</title>
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; text-align: center; padding: 2rem; margin: 0;
                min-height: 100vh; display: flex; align-items: center; justify-content: center;
              }
              .container { max-width: 500px; }
              .compass { font-size: 4rem; margin-bottom: 1rem; }
              h1 { font-size: 2rem; margin-bottom: 1rem; }
              p { font-size: 1.1rem; opacity: 0.9; margin-bottom: 2rem; }
              button { 
                background: rgba(255,255,255,0.2); border: 2px solid white; 
                color: white; padding: 12px 24px; font-size: 1rem; border-radius: 8px;
                cursor: pointer; transition: all 0.3s ease;
              }
              button:hover { background: rgba(255,255,255,0.3); }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="compass">üß≠</div>
              <h1>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–º–ø–∞—Å</h1>
              <p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ!</p>
              <button onclick="window.location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
          </body>
          </html>
        `, { headers: { 'Content-Type': 'text/html' } }));
      })
    ]).then(() => {
      console.log('‚úÖ [SW] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW
      return self.skipWaiting();
    })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('üöÄ [SW] –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker...');
  
  event.waitUntil(
    Promise.all([
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && 
                cacheName !== DYNAMIC_CACHE && 
                cacheName !== API_CACHE) {
              console.log('üóëÔ∏è [SW] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ]).then(() => {
      console.log('‚úÖ [SW] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    })
  );
});

// –£–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –¥—Ä—É–≥–∏–º –¥–æ–º–µ–Ω–∞–º (–∫—Ä–æ–º–µ API)
  if (url.origin !== location.origin && !isApiRequest(request)) {
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  if (isStaticAsset(request)) {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã - –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    event.respondWith(handleStaticAsset(request));
  } else if (isApiRequest(request)) {
    // API –∑–∞–ø—Ä–æ—Å—ã - —Å–µ—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å fallback
    event.respondWith(handleApiRequest(request));
  } else if (isNavigationRequest(request)) {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è - —Å–µ—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å offline fallback
    event.respondWith(handleNavigationRequest(request));
  } else {
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    event.respondWith(handleDynamicRequest(request));
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
function isStaticAsset(request) {
  return request.destination === 'script' || 
         request.destination === 'style' || 
         request.destination === 'image' ||
         request.url.includes('/static/');
}

function isApiRequest(request) {
  return request.url.includes('/api/') || 
         request.url.includes('cbr.ru') ||
         request.url.includes('eodhd.com') ||
         request.url.includes('api.coingecko.com');
}

function isNavigationRequest(request) {
  return request.mode === 'navigate';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

// Cache First - –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
async function handleStaticAsset(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('‚ö†Ô∏è [SW] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:', error);
    return new Response('–†–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { status: 503 });
  }
}

// Network First - –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleApiRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(API_CACHE);
      // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
      if (request.method === 'GET') {
        cache.put(request, networkResponse.clone());
      }
    }
    return networkResponse;
  } catch (error) {
    console.log('üåê [SW] –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º –≤ –∫—ç—à–µ API');
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
      const response = cachedResponse.clone();
      response.headers.set('X-Cache-Status', 'from-cache');
      return response;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è API
    return new Response(JSON.stringify({
      error: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ',
      cached: false,
      timestamp: Date.now()
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 503
    });
  }
}

// Network First —Å offline fallback - –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async function handleNavigationRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('üåê [SW] –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫—ç—à–µ');
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return caches.match('/offline');
  }
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function handleDynamicRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    return cachedResponse || new Response('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { status: 503 });
  }
}

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
self.addEventListener('push', (event) => {
  console.log('üì± [SW] –ü–æ–ª—É—á–µ–Ω–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
  
  let notificationData = {
    title: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–º–ø–∞—Å',
    body: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!',
    icon: '/favicon.svg',
    badge: '/favicon.svg',
    vibrate: [200, 100, 200],
    tag: 'financial-update',
    renotify: true,
    requireInteraction: false,
    actions: [
      {
        action: 'open',
        title: 'üìà –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        icon: '/favicon.svg'
      },
      {
        action: 'dismiss',
        title: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
        icon: '/favicon.svg'
      }
    ],
    data: {
      url: '/',
      timestamp: Date.now()
    }
  };

  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ push —Å–æ–æ–±—â–µ–Ω–∏—è
  if (event.data) {
    try {
      const pushData = event.data.json();
      notificationData = { ...notificationData, ...pushData };
    } catch (error) {
      console.log('‚ö†Ô∏è [SW] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ push –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  event.waitUntil(
    self.registration.showNotification(notificationData.title, notificationData)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('üëÜ [SW] –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
  
  event.notification.close();

  if (event.action === 'open' || !event.action) {
    event.waitUntil(
      clients.matchAll({ type: 'window' }).then((clientList) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ
        for (let client of clientList) {
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            return client.focus();
          }
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        if (clients.openWindow) {
          const targetUrl = event.notification.data?.url || '/';
          return clients.openWindow(targetUrl);
        }
      })
    );
  } else if (event.action === 'dismiss') {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    console.log('‚ùå [SW] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
self.addEventListener('sync', (event) => {
  console.log('üîÑ [SW] –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(performBackgroundSync());
  }
});

async function performBackgroundSync() {
  try {
    console.log('üîÑ [SW] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const responses = await Promise.allSettled([
      fetch('/api/cbr/currencies'),
      fetch('/api/stocks/data')
    ]);
    
    console.log('‚úÖ [SW] –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'BACKGROUND_SYNC_COMPLETE',
        timestamp: Date.now()
      });
    });
  } catch (error) {
    console.log('‚ö†Ô∏è [SW] –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
self.addEventListener('message', (event) => {
  console.log('üí¨ [SW] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', event.data);
  
  if (event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  } else if (event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      version: CACHE_NAME,
      timestamp: Date.now()
    });
  } else if (event.data.type === 'CLEAR_CACHE') {
    clearAllCaches().then(() => {
      event.ports[0].postMessage({ success: true });
    });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
async function clearAllCaches() {
  const cacheNames = await caches.keys();
  await Promise.all(cacheNames.map(name => caches.delete(name)));
  console.log('üóëÔ∏è [SW] –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
}

console.log('üöÄ [SW] Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω. –í–µ—Ä—Å–∏—è:', CACHE_NAME); 