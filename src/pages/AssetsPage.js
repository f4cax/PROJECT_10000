import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from '../utils/translations';
import { useAuth } from '../contexts/AuthContext';

export default function AssetsPage() {
  const { t } = useTranslation();
  const { token, isAuthenticated } = useAuth();
  const [loading, setLoading] = useState(true);
  const [assets, setAssets] = useState([]);
  const [portfolio, setPortfolio] = useState({
    totalValue: 0,
    totalGainLoss: 0,
    totalGainLossPercent: 0,
    distribution: {}
  });
  const [analytics, setAnalytics] = useState(null);
  const [syncing, setSyncing] = useState(false);
  const [showAddAsset, setShowAddAsset] = useState(false);
  const [editingAsset, setEditingAsset] = useState(null);
  const [newAsset, setNewAsset] = useState({
    type: 'cash',
    name: '',
    amount: 0,
    currency: 'RUB',
    symbol: '',
    quantity: '',
    purchasePrice: '',
    description: '',
    category: '',
    isTracked: false
  });

  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadAssets = useCallback(async (sync = false) => {
    try {
      if (!token) {
        setLoading(false);
        return;
      }

      const endpoint = sync ? '/api/user/assets?sync=true' : '/api/user/assets';
      const url = `${apiUrl}${endpoint}`;
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        setAssets(data.assets || []);
        setPortfolio(data.portfolio || {
          totalValue: 0,
          totalGainLoss: 0,
          totalGainLossPercent: 0,
          distribution: {}
        });
              } else if (response.status === 401) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–æ–≤');
        }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–æ–≤:', error);
    } finally {
      setLoading(false);
      setSyncing(false);
    }
  }, [token, apiUrl]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const loadAnalytics = useCallback(async () => {
    try {
      if (!token) return;

      const response = await fetch(`${apiUrl}/api/user/portfolio/analytics`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        setAnalytics(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    }
  }, [token, apiUrl]);

  useEffect(() => {
    loadAssets();
    loadAnalytics();
  }, [loadAssets, loadAnalytics]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
  const handleSync = async () => {
    setSyncing(true);
    await loadAssets(true);
    await loadAnalytics();
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
  const handleAddAsset = async () => {
    if (!newAsset.name || newAsset.amount <= 0) return;

    try {
      const response = await fetch(`${apiUrl}/api/user/assets`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(newAsset)
      });

      if (response.ok) {
        setNewAsset({
          type: 'cash',
          name: '',
          amount: 0,
          currency: 'RUB',
          symbol: '',
          quantity: '',
          purchasePrice: '',
          description: '',
          category: '',
          isTracked: false
        });
        setShowAddAsset(false);
        await loadAssets();
        await loadAnalytics();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞:', error);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
  const handleDeleteAsset = async (assetId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤?')) return;

    try {
      const response = await fetch(`${apiUrl}/api/user/assets/${assetId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        await loadAssets();
        await loadAnalytics();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞:', error);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
  const handleEditAsset = async (assetId, updateData) => {
    try {
      const response = await fetch(`${apiUrl}/api/user/assets/${assetId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(updateData)
      });

      if (response.ok) {
        setEditingAsset(null);
        await loadAssets();
        await loadAnalytics();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞:', error);
    }
  };

  const formatCurrency = (amount, currency = 'RUB') => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const getAssetIcon = (type) => {
    const icons = {
      cash: 'üí∞',
      stocks: 'üìà',
      crypto: '‚Çø',
      realestate: 'üè†',
      business: 'üè¢',
      bonds: 'üìä',
      other: 'üíº'
    };
    return icons[type] || 'üíº';
  };

  const getAssetColor = (type) => {
    const colors = {
      cash: 'green',
      stocks: 'blue',
      crypto: 'orange',
      realestate: 'purple',
      business: 'indigo',
      bonds: 'teal',
      other: 'gray'
    };
    return colors[type] || 'gray';
  };



  if (loading) {
    return (
      <div className="max-w-6xl mx-auto space-y-8 fade-in">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            üí∞ {t('assetsTitle') || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏'}
          </h1>
          <div className="animate-spin text-4xl">‚è≥</div>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å...
          </p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="max-w-6xl mx-auto space-y-8 fade-in">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            üí∞ {t('assetsTitle') || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏'}
          </h1>
          <div className="card text-center max-w-md mx-auto">
            <div className="text-6xl mb-4">üîê</div>
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
            </p>
            <button 
              onClick={() => window.location.href = '/'}
              className="btn-primary"
            >
              –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto space-y-8 fade-in">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
          üí∞ {t('portfolioManagement') || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏'}
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400">
          {t('fullPortfolioControl') || '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–∞—à–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º'}
        </p>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex flex-wrap gap-4 justify-center">
        <button
          onClick={() => setShowAddAsset(true)}
          className="btn-primary"
        >
          ‚ûï {t('addAsset') || '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤'}
        </button>
        <button
          onClick={handleSync}
          disabled={syncing}
          className="btn-secondary"
        >
          {syncing ? `üîÑ ${t('syncing') || '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...'}` : `üîÑ ${t('syncPrices') || '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã'}`}
        </button>
        <button
          onClick={() => loadAssets()}
          className="btn-secondary"
        >
          üîÉ {t('refreshData') || '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
        </button>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="card text-center bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20">
          <h3 className="text-lg font-semibold text-green-900 dark:text-green-300 mb-2">
            üíé {t('totalValue') || '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å'}
          </h3>
          <div className="text-3xl font-bold text-green-600 dark:text-green-400">
            {formatCurrency(portfolio.totalValue)}
          </div>
          {portfolio.lastCalculated && (
            <p className="text-xs text-green-700 dark:text-green-500 mt-1">
              {t('updated') || '–û–±–Ω–æ–≤–ª–µ–Ω–æ'}: {new Date(portfolio.lastCalculated).toLocaleTimeString()}
            </p>
          )}
        </div>

        <div className="card text-center">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            üìä {t('numberOfAssets') || '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤'}
          </h3>
          <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
            {assets.length}
          </div>
          <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
            {t('assetsCount') || '–†–∞–∑–ª–∏—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤'}
          </p>
        </div>

        <div className={`card text-center ${portfolio.totalGainLoss >= 0 ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20'}`}>
          <h3 className={`text-lg font-semibold mb-2 ${portfolio.totalGainLoss >= 0 ? 'text-green-900 dark:text-green-300' : 'text-red-900 dark:text-red-300'}`}>
            üìà {t('profitability') || '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'}
          </h3>
          <div className={`text-3xl font-bold ${portfolio.totalGainLoss >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
            {portfolio.totalGainLoss >= 0 ? '+' : ''}{formatCurrency(portfolio.totalGainLoss)}
          </div>
          <p className={`text-sm font-medium ${portfolio.totalGainLoss >= 0 ? 'text-green-700 dark:text-green-500' : 'text-red-700 dark:text-red-500'}`}>
            {portfolio.totalGainLossPercent >= 0 ? '+' : ''}{portfolio.totalGainLossPercent.toFixed(2)}%
          </p>
        </div>

        <div className="card text-center">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            üéØ {t('diversification') || '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'}
          </h3>
          <div className="text-3xl font-bold text-purple-600 dark:text-purple-400">
            {analytics?.diversification?.score?.toFixed(0) || 0}%
          </div>
          <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
            {t('portfolioAssessment') || '–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è'}
          </p>
        </div>
      </div>

      {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ */}
      {portfolio.distribution && Object.keys(portfolio.distribution).some(key => portfolio.distribution[key] > 0) && (
        <div className="card">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6">
            ü•ß {t('portfolioDistribution') || '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è'}
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {Object.entries(portfolio.distribution).map(([type, amount]) => {
              if (amount <= 0) return null;
              const percentage = portfolio.totalValue > 0 ? (amount / portfolio.totalValue * 100) : 0;
              const color = getAssetColor(type);
              
              return (
                <div key={type} className="text-center">
                  <div className="text-3xl mb-2">{getAssetIcon(type)}</div>
                  <h4 className="font-semibold text-gray-900 dark:text-white capitalize">
                    {t(type) || type}
                  </h4>
                  <div className="text-lg font-bold text-gray-700 dark:text-gray-300">
                    {percentage.toFixed(1)}%
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {formatCurrency(amount)}
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2">
                    <div 
                      className={`bg-${color}-500 h-2 rounded-full transition-all duration-300`}
                      style={{ width: `${Math.min(percentage, 100)}%` }}
                    ></div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ */}
      <div className="card">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">
            üìù {t('yourAssetsTitle') || '–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã'}
          </h2>
          {assets.filter(a => a.isTracked).length > 0 && (
            <span className="text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full">
              üì° {assets.filter(a => a.isTracked).length} {t('assetsTracked') || '–∞–∫—Ç–∏–≤–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è'}
            </span>
          )}
        </div>
        
        {assets.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üìÅ</div>
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              {t('portfolioEmpty') || '–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç'}
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {t('addFirstAsset') || '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è'}
            </p>
            <button
              onClick={() => setShowAddAsset(true)}
              className="btn-primary"
            >
              ‚ûï {t('addFirstAssetButton') || '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤'}
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            {assets.map(asset => {
              const percentage = portfolio.totalValue > 0 ? (asset.amount / portfolio.totalValue * 100) : 0;
              const gainLoss = asset.quantity && asset.purchasePrice && asset.currentPrice 
                ? (asset.currentPrice - asset.purchasePrice) * asset.quantity
                : 0;
              const gainLossPercent = asset.purchasePrice && asset.currentPrice
                ? ((asset.currentPrice - asset.purchasePrice) / asset.purchasePrice) * 100
                : 0;
              
              return (
                <div key={asset._id} className="flex items-center justify-between p-6 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">{getAssetIcon(asset.type)}</div>
                    <div>
                      <div className="flex items-center space-x-2">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {asset.name}
                        </h3>
                        {asset.symbol && (
                          <span className="text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded">
                            {asset.symbol}
                          </span>
                        )}
                        {asset.isTracked && (
                          <span className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-2 py-1 rounded">
                            üì° {t('tracked') || '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è'}
                          </span>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {percentage.toFixed(1)}% {t('fromPortfolio') || '–æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è'}
                        {asset.quantity && <span> ‚Ä¢ {asset.quantity} {t('pieces') || '—à—Ç.'}</span>}
                        {asset.category && <span> ‚Ä¢ {asset.category}</span>}
                      </p>
                      {asset.description && (
                        <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
                          {asset.description}
                        </p>
                      )}
                      {asset.lastUpdated && asset.isTracked && (
                        <p className="text-xs text-gray-500 dark:text-gray-500">
                          {t('updated') || '–û–±–Ω–æ–≤–ª–µ–Ω–æ'}: {new Date(asset.lastUpdated).toLocaleString()}
                        </p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-6">
                    {/* –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
                    <div className="text-right">
                      <div className="text-xl font-bold text-gray-900 dark:text-white">
                        {formatCurrency(asset.amount, asset.currency)}
                      </div>
                      {asset.currentPrice && asset.quantity && (
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          {formatCurrency(asset.currentPrice)} {t('perPiece') || '–∑–∞ —à—Ç.'}
                        </div>
                      )}
                      {gainLoss !== 0 && (
                        <div className={`text-sm font-medium ${gainLoss >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                          {gainLoss >= 0 ? '+' : ''}{formatCurrency(gainLoss)} ({gainLossPercent >= 0 ? '+' : ''}{gainLossPercent.toFixed(2)}%)
                        </div>
                      )}
                      <div className="w-32 bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2">
                        <div 
                          className={`bg-${getAssetColor(asset.type)}-500 h-2 rounded-full transition-all duration-300`}
                          style={{ width: `${Math.min(percentage, 100)}%` }}
                        ></div>
                      </div>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setEditingAsset(asset)}
                        className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-2"
                        title={t('edit') || '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDeleteAsset(asset._id)}
                        className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 p-2"
                        title={t('delete') || '–£–¥–∞–ª–∏—Ç—å'}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {analytics && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –¢–æ–ø –∞–∫—Ç–∏–≤—ã */}
          {analytics.topAssets?.length > 0 && (
            <div className="card">
              <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                ü•á {t('topAssets') || '–¢–æ–ø –∞–∫—Ç–∏–≤—ã'}
              </h3>
              <div className="space-y-3">
                {analytics.topAssets.map((asset, index) => (
                  <div key={index} className="flex justify-between items-center">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{getAssetIcon(asset.type)}</span>
                      <div>
                        <p className="font-medium text-gray-900 dark:text-white">{asset.name}</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{asset.percentage.toFixed(1)}%</p>
                      </div>
                    </div>
                    <span className="font-semibold text-gray-700 dark:text-gray-300">
                      {formatCurrency(asset.amount)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          <div className="card bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800">
            <h3 className="text-xl font-semibold text-blue-900 dark:text-blue-300 mb-4">
              üí° {t('recommendations') || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
            </h3>
            
            {analytics.diversification?.recommendations?.length > 0 && (
              <div className="mb-4">
                <h4 className="font-medium text-blue-800 dark:text-blue-400 mb-2">{t('diversificationRecommendations') || '–ü–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏'}:</h4>
                <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                  {analytics.diversification.recommendations.map((rec, index) => (
                    <li key={index}>‚Ä¢ {rec}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {analytics.suggestions?.length > 0 && (
              <div>
                <h4 className="font-medium text-blue-800 dark:text-blue-400 mb-2">{t('generalTips') || '–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã'}:</h4>
                <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                  {analytics.suggestions.map((suggestion, index) => (
                    <li key={index}>‚Ä¢ {suggestion}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {(!analytics.diversification?.recommendations?.length && !analytics.suggestions?.length) && (
              <p className="text-blue-700 dark:text-blue-300">
                {t('portfolioExcellent') || 'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.'}
              </p>
            )}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ */}
      {showAddAsset && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="card max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6">
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="label">–¢–∏–ø –∞–∫—Ç–∏–≤–∞ *</label>
                <select
                  value={newAsset.type}
                  onChange={(e) => setNewAsset({...newAsset, type: e.target.value})}
                  className="input-field"
                >
                  <option value="cash">üí∞ –ù–∞–ª–∏—á–Ω—ã–µ/–î–µ–ø–æ–∑–∏—Ç—ã</option>
                  <option value="stocks">üìà –ê–∫—Ü–∏–∏</option>
                  <option value="crypto">‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</option>
                  <option value="realestate">üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</option>
                  <option value="business">üè¢ –ë–∏–∑–Ω–µ—Å</option>
                  <option value="bonds">üìä –û–±–ª–∏–≥–∞—Ü–∏–∏</option>
                  <option value="other">üíº –î—Ä—É–≥–æ–µ</option>
                </select>
              </div>
              
              <div>
                <label className="label">–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ *</label>
                <input
                  type="text"
                  value={newAsset.name}
                  onChange={(e) => setNewAsset({...newAsset, name: e.target.value})}
                  className="input-field"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–±–µ—Ä–±–∞–Ω–∫ –¥–µ–ø–æ–∑–∏—Ç"
                />
              </div>
              
              <div>
                <label className="label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å *</label>
                <input
                  type="number"
                  value={newAsset.amount || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    setNewAsset({...newAsset, amount: value === '' ? '' : parseFloat(value) || 0});
                  }}
                  onFocus={(e) => e.target.select()}
                  className="input-field"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞"
                />
              </div>
              
              <div>
                <label className="label">–í–∞–ª—é—Ç–∞</label>
                <select
                  value={newAsset.currency}
                  onChange={(e) => setNewAsset({...newAsset, currency: e.target.value})}
                  className="input-field"
                >
                  <option value="RUB">‚ÇΩ –†—É–±–ª–∏</option>
                  <option value="USD">$ –î–æ–ª–ª–∞—Ä—ã</option>
                  <option value="EUR">‚Ç¨ –ï–≤—Ä–æ</option>
                </select>
              </div>

              {(newAsset.type === 'stocks' || newAsset.type === 'crypto') && (
                <>
                  <div>
                    <label className="label">–°–∏–º–≤–æ–ª (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã)</label>
                    <input
                      type="text"
                      value={newAsset.symbol}
                      onChange={(e) => setNewAsset({...newAsset, symbol: e.target.value})}
                      className="input-field"
                      placeholder={newAsset.type === 'stocks' ? 'AAPL, GOOGL' : 'BTC, ETH'}
                    />
                  </div>
                  
                  <div>
                    <label className="label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                    <input
                      type="number"
                      step="0.00001"
                      value={newAsset.quantity}
                      onChange={(e) => setNewAsset({...newAsset, quantity: e.target.value})}
                      className="input-field"
                      placeholder="1.5"
                    />
                  </div>
                  
                  <div>
                    <label className="label">–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏</label>
                    <input
                      type="number"
                      step="0.01"
                      value={newAsset.purchasePrice}
                      onChange={(e) => setNewAsset({...newAsset, purchasePrice: e.target.value})}
                      className="input-field"
                      placeholder="100.50"
                    />
                  </div>
                  
                  <div className="flex items-center">
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={newAsset.isTracked}
                        onChange={(e) => setNewAsset({...newAsset, isTracked: e.target.checked})}
                        className="rounded"
                      />
                      <span className="text-sm text-gray-700 dark:text-gray-300">
                        üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                      </span>
                    </label>
                  </div>
                </>
              )}
              
              <div className="md:col-span-2">
                <label className="label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={newAsset.description}
                  onChange={(e) => setNewAsset({...newAsset, description: e.target.value})}
                  className="input-field"
                  rows="2"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ"
                />
              </div>
              
              <div>
                <label className="label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <input
                  type="text"
                  value={newAsset.category}
                  onChange={(e) => setNewAsset({...newAsset, category: e.target.value})}
                  className="input-field"
                  placeholder="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å..."
                />
              </div>
            </div>
            
            <div className="flex space-x-4 mt-6">
              <button
                onClick={handleAddAsset}
                className="btn-primary flex-1"
                disabled={!newAsset.name || newAsset.amount <= 0}
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤
              </button>
              <button
                onClick={() => setShowAddAsset(false)}
                className="btn-secondary flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ */}
      {editingAsset && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="card max-w-lg w-full">
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {editingAsset.name}
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input
                  type="text"
                  defaultValue={editingAsset.name}
                  onChange={(e) => setEditingAsset({...editingAsset, name: e.target.value})}
                  className="input-field"
                />
              </div>
              
              <div>
                <label className="label">–°—Ç–æ–∏–º–æ—Å—Ç—å</label>
                <input
                  type="number"
                  defaultValue={editingAsset.amount}
                  onChange={(e) => setEditingAsset({...editingAsset, amount: parseFloat(e.target.value) || 0})}
                  className="input-field"
                />
              </div>
              
              {editingAsset.symbol && (
                <div className="flex items-center">
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={editingAsset.isTracked}
                      onChange={(e) => setEditingAsset({...editingAsset, isTracked: e.target.checked})}
                      className="rounded"
                    />
                    <span className="text-sm text-gray-700 dark:text-gray-300">
                      üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </span>
                  </label>
                </div>
              )}
            </div>
            
            <div className="flex space-x-4 mt-6">
              <button
                onClick={() => handleEditAsset(editingAsset._id, editingAsset)}
                className="btn-primary flex-1"
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button
                onClick={() => setEditingAsset(null)}
                className="btn-secondary flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 