import React, { useState, useEffect, useCallback, useRef } from 'react';
import BudgetChart from '../components/charts/BudgetChart';
import BudgetRuleCard from '../components/forms/BudgetRuleCard';
import IncomeForm from '../components/forms/IncomeForm';
import NotificationCard from '../components/common/NotificationCard';
import FinancialStrategyCard from '../components/forms/FinancialStrategyCard';
import SavingsGoalCard from '../components/forms/SavingsGoalCard';
import { useTranslation } from '../utils/translations';
import { useAuth } from '../contexts/AuthContext';

export default function HomePage() {
  const { t } = useTranslation();
  const { saveMonthlyIncome, saveStrategy, saveSavingsGoals, isAuthenticated, user } = useAuth();
  const [monthlyIncome, setMonthlyIncome] = useState(0);
  const [budgetDistribution, setBudgetDistribution] = useState({
    needs: 0,        // 50% - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    safety: 0,       // 25% - –ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  
    investments: 0,  // 15% - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    wants: 0         // 10% - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∂–µ–ª–∞–Ω–∏—è
  });
  const [notifications, setNotifications] = useState([]);
  const [selectedStrategy, setSelectedStrategy] = useState(null);
  const [savingsGoals, setSavingsGoals] = useState([]);
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—ã–ª–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  const hasLoadedInitialData = useRef(false);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const handleStrategyChange = useCallback((newStrategy) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (!selectedStrategy || selectedStrategy.id !== newStrategy.id) {
      setSelectedStrategy(newStrategy);
    }
  }, [selectedStrategy]);

  // –ü—Ä–∞–≤–∏–ª–æ 50-25-15-10 Mark Tilbury
  const calculateBudget = (income) => {
    return {
      needs: Math.round(income * 0.50),
      safety: Math.round(income * 0.25),
      investments: Math.round(income * 0.15),
      wants: Math.round(income * 0.10)
    };
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const generateNotifications = (income, budget, strategy, goals) => {
    const notifications = [];

    if (income < 30000) {
      notifications.push({
        id: 1,
        type: 'warning',
        title: t('language') === 'ru' ? '–ù–∏–∑–∫–∏–π –¥–æ—Ö–æ–¥' : 'Low Income',
        message: t('lowIncomeWarning'),
        icon: '‚ö†Ô∏è'
      });
    }

    if (income > 100000) {
      notifications.push({
        id: 2,
        type: 'success',
        title: t('language') === 'ru' ? '–û—Ç–ª–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥!' : 'Great Income!',
        message: t('highIncomeAdvice'),
        icon: 'üí™'
      });
    }

    if (budget.wants > 10000) {
      notifications.push({
        id: 3,
        type: 'danger',
        title: t('language') === 'ru' ? '–ú–Ω–æ–≥–æ —Ç—Ä–∞—Ç –Ω–∞ –∂–µ–ª–∞–Ω–∏—è' : 'High Entertainment Spending',
        message: t('highSpendingWarning'),
        icon: 'üö®'
      });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (strategy) {
      const expectedReturn = getExpectedReturn(strategy.id);
      const yearlyProjection = budget.investments * 12 * (1 + expectedReturn / 100);
      
      notifications.push({
        id: 4,
        type: 'info',
        title: `${t('strategyForecastFor')} ${strategy.title.toLowerCase()}`,
        message: `${t('strategyProjection')} "${strategy.title}" ${t('monthlyInvestment')} ${budget.investments.toLocaleString()} ${t('rubPerMonth')} ~${Math.round(yearlyProjection).toLocaleString()} ${t('rubThroughYear')} (${strategy.expectedReturn}).`,
        icon: strategy.icon
      });

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ —Ä–∏—Å–∫–∞–º
      if (strategy.id === 'aggressive' && income < 50000) {
        notifications.push({
          id: 5,
          type: 'warning',
          title: t('highRiskLowIncome'),
          message: t('aggressiveRiskWarning'),
          icon: '‚ö†Ô∏è'
        });
      }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ü–µ–ª—è–º
    if (goals && goals.length > 0 && budget.safety > 0) {
      goals.forEach((goal, index) => {
        const monthsToGoal = Math.ceil((goal.targetAmount - goal.currentAmount) / budget.safety);
        const monthWord = monthsToGoal === 1 ? t('monthWord') : monthsToGoal < 5 ? t('monthsWord2') : t('monthsWord');
        notifications.push({
          id: 6 + index,
          type: 'success',
          title: `${t('savingsProgress')} "${goal.title}"`,
          message: `${t('savingMonthly')} ${budget.safety.toLocaleString()} ${t('achieveGoalInStrategy')} ${monthsToGoal} ${monthWord}!`,
          icon: 'üéØ'
        });
      });
    }

    return notifications;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const getExpectedReturn = (strategyId) => {
    switch (strategyId) {
      case 'conservative': return 6.5; // 5-8% —Å—Ä–µ–¥–Ω–µ–µ 6.5%
      case 'moderate': return 10; // 8-12% —Å—Ä–µ–¥–Ω–µ–µ 10%
      case 'aggressive': return 18; // 12-25% —Å—Ä–µ–¥–Ω–µ–µ 18%
      default: return 10;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ ID (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å FinancialStrategyCard)
  const createStrategyById = useCallback((strategyId) => {
    const strategiesMap = {
      'conservative': {
        id: 'conservative',
        title: t('conservativeTitle'),
        subtitle: t('conservativeSubtitle'),
        description: t('conservativeDescription'),
        expectedReturn: t('conservativeReturn'),
        riskLevel: t('conservativeRisk'),
        icon: 'üõ°Ô∏è'
      },
      'moderate': {
        id: 'moderate',
        title: t('moderateTitle'),
        subtitle: t('moderateSubtitle'),
        description: t('moderateDescription'),
        expectedReturn: t('moderateReturn'),
        riskLevel: t('moderateRisk'),
        icon: '‚öñÔ∏è'
      },
      'aggressive': {
        id: 'aggressive',
        title: t('aggressiveTitle'),
        subtitle: t('aggressiveSubtitle'),
        description: t('aggressiveDescription'),
        expectedReturn: t('aggressiveReturn'),
        riskLevel: t('aggressiveRisk'),
        icon: 'üöÄ'
      }
    };
    
    return strategiesMap[strategyId] || null;
  }, [t]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (isAuthenticated && user?.financialData && !hasLoadedInitialData.current) {
      const data = user.financialData;
      console.log('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      if (data.monthlyIncome) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:', data.monthlyIncome);
        setMonthlyIncome(data.monthlyIncome);
      }
      
      if (data.budgetDistribution) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞');
        setBudgetDistribution(data.budgetDistribution);
      }
      
      if (data.selectedStrategy) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:', data.selectedStrategy);
        const strategy = createStrategyById(data.selectedStrategy);
        setSelectedStrategy(strategy);
      }
      
      if (data.savingsGoals && data.savingsGoals.length > 0) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–∑ –ë–î:', data.savingsGoals);
        setSavingsGoals(data.savingsGoals);
      } else {
        console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ –ë–î');
      }
      
      // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      hasLoadedInitialData.current = true;
    }
  }, [isAuthenticated, user?.financialData, createStrategyById]);

  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!isAuthenticated) {
      hasLoadedInitialData.current = false;
      console.log('–°–±—Ä–æ—Å–∏–ª–∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }, [isAuthenticated]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞)
  useEffect(() => {
    if (selectedStrategy?.id) {
      const updatedStrategy = createStrategyById(selectedStrategy.id);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å–º–µ–Ω–∞ —è–∑—ã–∫–∞)
      if (updatedStrategy && updatedStrategy.title !== selectedStrategy.title) {
        setSelectedStrategy(updatedStrategy);
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [t, createStrategyById]); // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –≤–∫–ª—é—á–∞–µ–º selectedStrategy - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞

  useEffect(() => {
    if (monthlyIncome > 0) {
      const budget = calculateBudget(monthlyIncome);
      setBudgetDistribution(budget);
      setNotifications(generateNotifications(monthlyIncome, budget, selectedStrategy, savingsGoals));
      
      // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (isAuthenticated) {
        saveMonthlyIncome(monthlyIncome, budget);
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [monthlyIncome, selectedStrategy, savingsGoals, isAuthenticated, saveMonthlyIncome]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
  useEffect(() => {
    if (selectedStrategy && isAuthenticated && user?.financialData) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      const currentSavedStrategy = user.financialData.selectedStrategy;
      if (currentSavedStrategy !== selectedStrategy.id) {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:', selectedStrategy.id);
        saveStrategy(selectedStrategy);
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedStrategy, isAuthenticated, saveStrategy, user?.financialData?.selectedStrategy]);

  return (
    <div className="space-y-8 fade-in">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-3 md:mb-4">
          üí∞ {t('financialManagement')}
        </h1>
        <p className="text-base md:text-lg text-gray-600 max-w-2xl mx-auto px-4">
          {t('budgetDistributionRule')} <span className="font-semibold text-primary-600">50-25-15-10</span> {t('fromMarkTilbury')}
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–æ—Ö–æ–¥–∞ */}
      <div className="max-w-md mx-auto px-4 md:px-0">
        <IncomeForm 
          monthlyIncome={monthlyIncome}
          setMonthlyIncome={setMonthlyIncome}
        />
      </div>

      {monthlyIncome > 0 && (
        <>
          {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 px-2 md:px-0">
            <BudgetRuleCard
              title={t('essentialExpenses')}
              subtitle={`50${t('percentFromIncome')}`}
              amount={budgetDistribution.needs}
              color="bg-gray-500"
              description={t('essentialDesc')}
              icon="üè†"
            />
            <BudgetRuleCard
              title={t('emergencyFund')}
              subtitle={`25${t('percentFromIncome')}`}
              amount={budgetDistribution.safety}
              color="bg-primary-500"
              description={t('emergencyDesc')}
              icon="üõ°Ô∏è"
            />
            <BudgetRuleCard
              title={t('investments')}
              subtitle={selectedStrategy ? `${selectedStrategy.title} ‚Ä¢ 15${t('percentFromIncome')}` : `15${t('percentFromIncome')}`}
              amount={budgetDistribution.investments}
              color="bg-green-500"
              description={selectedStrategy ? `${selectedStrategy.icon} ${selectedStrategy.description}\n${selectedStrategy.expectedReturn}` : t('investmentsDesc')}
              icon={selectedStrategy ? selectedStrategy.icon : "üìà"}
            />
            <BudgetRuleCard
              title={t('entertainment')}
              subtitle={`10${t('percentFromIncome')}`}
              amount={budgetDistribution.wants}
              color="bg-danger-500"
              description={t('entertainmentDesc')}
              icon="üéâ"
            />
          </div>

          {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è */}
          <FinancialStrategyCard
            selectedStrategy={selectedStrategy}
            onStrategyChange={handleStrategyChange}
          />

          {/* –¶–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è */}
          <div className="space-y-6">
            {savingsGoals.map((goal, index) => (
              <SavingsGoalCard
                key={goal.id || index}
                goal={goal}
                onGoalChange={(updatedGoal) => {
                  if (updatedGoal === null) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
                    const newGoals = savingsGoals.filter((_, i) => i !== index);
                    console.log('–£–¥–∞–ª—è–µ–º —Ü–µ–ª—å, –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤:', newGoals);
                    setSavingsGoals(newGoals);
                    if (isAuthenticated) {
                      saveSavingsGoals(newGoals);
                    }
                  } else {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
                    const newGoals = [...savingsGoals];
                    newGoals[index] = updatedGoal;
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å, –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤:', newGoals);
                    setSavingsGoals(newGoals);
                    if (isAuthenticated) {
                      saveSavingsGoals(newGoals);
                    }
                  }
                }}
                monthlyBudget={budgetDistribution}
              />
            ))}
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏ */}
            <div className="card bg-gradient-to-r from-primary-50 to-blue-50 border-primary-200 text-center">
              <div className="text-4xl mb-3">üéØ</div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {t('setSavingsGoal')}
              </h3>
              <p className="text-gray-600 mb-4">
                {t('addNewGoalDescription')}
              </p>
              <button
                onClick={() => {
                  const newGoal = {
                    id: Date.now(),
                    title: '',
                    targetAmount: '',
                    currentAmount: 0,
                    deadline: '',
                    category: 'other',
                    priority: 'medium'
                  };
                  const updatedGoals = [...savingsGoals, newGoal];
                  console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å, –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤:', updatedGoals);
                  setSavingsGoals(updatedGoals);
                }}
                className="btn-primary"
              >
                üìù {t('setSavingsGoal')}
              </button>
            </div>
          </div>

          {/* –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */}
          <div className="max-w-2xl mx-auto">
            <div className="card">
              <h3 className="text-xl font-semibold text-gray-900 mb-4 text-center">
                {t('budgetVisualization')}
              </h3>
              <BudgetChart budgetDistribution={budgetDistribution} />
            </div>
          </div>

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {notifications.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-xl font-semibold text-gray-900 text-center">
                üí° {t('personalRecommendations')}
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {notifications.map((notification) => (
                  <NotificationCard key={notification.id} notification={notification} />
                ))}
              </div>
            </div>
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="card bg-gradient-to-r from-primary-50 to-blue-50 border-primary-200">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-primary-900 mb-2">
                üéØ {t('markTilburyRuleTitle')}
              </h3>
              <p className="text-primary-700 text-sm">
                {t('markTilburyRuleDesc')}
              </p>
              <div className="mt-4 flex justify-center space-x-4 text-xs text-primary-600">
                <span>‚úÖ {t('needsCategoryDesc')}</span>
                <span>‚úÖ {t('savingsCategoryDesc')}</span>
                <span>‚úÖ {t('investmentsCategoryDesc')}</span>
                <span>‚úÖ {t('wantsCategoryDesc')}</span>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
} 